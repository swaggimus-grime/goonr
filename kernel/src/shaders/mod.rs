// This file is @generated by brush-wgsl from source wgsl files. Do not edit.
#![allow(dead_code, unused_mut, trivial_numeric_casts)]
#![allow(clippy::all)]
#![allow(clippy::derive_partial_eq_without_eq)]
#[rustfmt::skip]
fn create_composer() -> naga_oil::compose::Composer {
    let mut composer = naga_oil::compose::Composer::default().with_capabilities(
            naga::valid::Capabilities::all()
        );
    composer
}
#[rustfmt::skip]
pub mod wg {
    pub const WORKGROUP_SIZE: [u32; 3] = [1, 1, 1];
    #[repr(C, align(4))]
    #[derive(bytemuck::Pod, bytemuck::Zeroable, Debug, PartialEq, Clone, Copy)]
    pub struct Uniforms {
            pub wg_size_x: i32,
            pub wg_size_y: i32,
            pub wg_size_z: i32,
    }
    
    pub(crate) fn create_shader_source(
       shader_defs: std::collections::HashMap<String, naga_oil::compose::ShaderDefValue>
    ) -> naga::Module {
        super::create_composer().make_naga_module(naga_oil::compose::NagaModuleDescriptor {
            source: include_str!("wg.wgsl"),
            file_path: "wg.wgsl",
            shader_defs,
            ..Default::default()
        }).expect("Failed to add module")
    }
}
